name: 'Shastra ISO Build'
description: 'Installs prerequisites for building ShastraOS on ubuntu'

inputs:
  iso-profile-repo:
    description: 'iso profiles to clone'
    required: true
    default: 'https://github.com/Shastra-OS/iso-build'
  iso-profile-branch:
    description: 'branch of the iso profiles to check out'
    required: false
outputs:
  file-path:
    description: "path of the generated iso"
    value: ${{ steps.image-build.outputs.file-path }}

runs:
  using: "composite"
  steps:
    - id: install-build-dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install \
          gdisk \
          zip \
          systemd-container \
          bmap-tools \
          asciidoc \
          libarchive-tools \
          git \
          build-essential \
          cmake \
          libarchive-dev \
          pkg-config \
          libcurl4-openssl-dev \
          libgpgme-dev \
          libssl-dev \
          fakeroot \
          dh-autoreconf \
          haveged \
          os-prober \
          kwalify \
          dosfstools \
          libisoburn1 \
          squashfs-tools \
          docbook2x \
          mktorrent \
          doxygen \
          python3-pip \
          zstd
        sudo pip3 install meson
        sudo pip3 install ninja
    - id: install-pacman
      shell: bash
      env:
        PACMAN_VERSION: 6.0.1
      run: |
        sudo git clone --depth 1 https://gitlab.manjaro.org/packages/core/pacman.git
        pushd pacman
          sudo wget https://sources.archlinux.org/other/pacman/pacman-${PACMAN_VERSION}.tar.xz
          sudo tar -xvf pacman-${PACMAN_VERSION}.tar.xz
          pushd pacman-${PACMAN_VERSION}
            sudo patch -p1 -i ../pacman-sync-first-option.patch
            sudo meson --prefix=/usr \
                      --buildtype=plain \
                      -Ddoc=disabled \
                      -Ddoxygen=enabled \
                      -Dscriptlet-shell=/usr/bin/bash \
                      -Dldconfig=/usr/bin/ldconfig \
                      build
            sudo meson compile -C build
            sudo meson install -C build
          popd
          sudo install -m644 pacman.conf /etc/pacman.conf
          sudo install -m644 makepkg.conf /etc/
          sudo mkdir -p /etc/pacman.d
          sudo touch /etc/pacman.d/mirrorlist
        popd
    - id: install-keyrings
      shell: bash
      run: |
        sudo install -dm755 /usr/share/pacman/keyrings/
        mkdir -p archlinux-keyring
        pushd archlinux-keyring
          wget https://archlinux.org/packages/core/any/archlinux-keyring/download -O /tmp/archlinux-keyring.tar.zst
          tar --use-compress-program=unzstd --strip-components=4 --wildcards -xvf /tmp/archlinux-keyring.tar.zst usr/share/pacman/keyrings/*
          sudo install -m0644 archlinux.gpg /usr/share/pacman/keyrings/
          sudo install -m0644 archlinux-trusted /usr/share/pacman/keyrings/
          sudo install -m0644 archlinux-revoked /usr/share/pacman/keyrings/
        popd

        sudo pacman-key --init
        sudo pacman-key --populate archlinux manjaro

        for gpg_key in ${{ inputs.additional-trusted-gpg }}; do
          sudo pacman-key --keyserver keys.openpgp.org --recv-key $gpg_key
        done
    - id: install-arch-install-scripts
      shell: bash
      env:
        VERSION: "24"
      run: |
        sudo wget https://github.com/archlinux/arch-install-scripts/archive/refs/tags/v${VERSION}.tar.gz -O arch-install-scripts.tar.gz
        sudo tar -xvf arch-install-scripts.tar.gz
        sudo make -C arch-install-scripts-${VERSION}
        sudo make -C arch-install-scripts-${VERSION} check
        sudo make -C arch-install-scripts-${VERSION} PREFIX=/usr install
        
        sudo wget https://gitlab.manjaro.org/applications/pacman-mirrors/-/raw/v4.19x-stable/conf/pacman-mirrors.conf -O /etc/pacman-mirrors.conf
   
    - id: install-mkinitcpio
      shell: bash
      env:
        VERSION: "30"
      run: |
        sudo wget https://gitlab.archlinux.org/mkinitcpio/mkinitcpio/-/archive/v${VERSION}/mkinitcpio-v${VERSION}.tar.gz
        sudo tar -xf mkinitcpio-v${VERSION}.tar.gz
        sudo make -C mkinitcpio-v${VERSION} install
        sudo sed -i -e 's|File|Path|' /usr/share/libalpm/hooks/*hook

    
    - id: image-build
      shell: bash
      env:
        EDITION: ${{ inputs.edition }}
        BRANCH: ${{ inputs.branch }}
        SCOPE: ${{ inputs.scope }}
        VERSION: ${{ inputs.version }}
        KERNEL: ${{ inputs.kernel }}
        CODE_NAME: ${{ inputs.code-name }}
        OFFICE: ${{ inputs.office-chooser }}
        BUILD_MIRROR: ${{ inputs.build-mirror }}
      run: |
        ./build.sh


    - id: upload-prepare
      shell: bash -O extglob {0}
      run: |
        echo "## ssh setup"
        mkdir -p /home/runner/.ssh
        touch /home/runner/.ssh/github_actions
        chmod 600 /home/runner/.ssh/github_actions
        ssh-agent -a /tmp/ssh_agent.sock > /dev/null
        echo "::set-output name=upload-files::./${{ steps.image-build.outputs.file-path }}+(|.sha*|.pkgs|.sig|.torrent)"
        mkdir -p ${{ inputs.edition }}/${{ inputs.version }}
    
   
    - id: upload-github-release
      shell: bash -O extglob {0}
      run: |
        # if is not yet supported in composite https://github.com/actions/runner/blob/main/docs/adrs/0549-composite-run-steps.md#if-condition
        if [ -z "${{ inputs.release-tag }}" ]; then 
          echo "## no release tag given"
          exit 0
        fi
        echo "## github upload"

        echo ${{ github.token }} | gh auth login --with-token
        gh release create ${{ inputs.release-tag }} --title ${{ inputs.release-tag }} --repo ${{ github.repository }} --notes "automated release" || echo "release already exists"

        GITHUB_LINK=https://github.com/${GITHUB_REPOSITORY}/releases/download/${{ inputs.release-tag }}

        if [[ -z "$(du --threshold=1950M ${{ steps.image-build.outputs.file-path }})" ]]; then
          # iso is small enough to upload already
          gh release upload ${{ inputs.release-tag }} --repo ${{ github.repository }} --clobber \
            ${{ steps.upload-prepare.outputs.upload-files }}
        else
          # iso is too big - creating a split-zip
          zip -j -s 1950m ${{ steps.image-build.outputs.file-path }}.zip ${{ steps.image-build.outputs.file-path }}
          
          REMOTE_FILES=$(find . -maxdepth 1 -name "*.z*" -exec basename {} \; | xargs -I{} echo "-w \"${GITHUB_LINK}/{}\"")
          gh release upload ${{ inputs.release-tag }} --repo ${{ github.repository }} --clobber \
            ./${{ steps.image-build.outputs.file-path }}+(.z*|.sha*|.pkgs|.sig|.torrent)
        fi

